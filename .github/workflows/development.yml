name: Push development images to Docker Hub

on:
  push:
    branches:
      - feature/*/*
      - hotfix/*/*
  pull_request:
    types:
      - closed
    branches:
      - master

concurrency:
  cancel-in-progress: true
  group: server-test-build

jobs:
  env_name:
    name: Fetch environment from branch name
    uses: vuevideo/client/.github/workflows/fetch_environment.reusable.yml@master

  unit_test:
    needs: env_name
    name: Perform Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Setting up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 19.4.0

      - name: Checking out the server repository
        uses: actions/checkout@v3

      - name: Restore server dependencies
        uses: actions/cache/restore@v3
        with:
          path: node_modules/**
          key: server-node-modules

      - name: Preparing server for tests
        run: |
          npm i
          npx prisma generate

      - name: Running Unit tests
        run: npm test

      - name: Caching server dependencies
        uses: actions/cache/save@v3
        with:
          path: node_modules/**
          key: server-node-modules

  build_and_push:
    name: Build Server Image and push it to Docker Hub
    needs: [unit_test, env_name]
    environment: ${{ needs.env_name.outputs.environment }}
    runs-on: ubuntu-latest
    env:
      ENV_NAME: ${{ needs.env_name.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: image_name
        name: Form proper Docker Image Name
        run: |
          DOCKER_TAG=$(echo ${{ vars.VERSION_PREFIX }}.${{ github.run_id }}.${{ env.ENV_NAME }})
          DOCKER_IMAGE="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/server"
          DOCKER_IMAGE_VERSION="${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_NAMESPACE }}/server:$DOCKER_TAG"

          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_VERSION=$DOCKER_IMAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.image_name.outputs.DOCKER_IMAGE }} .
          docker tag ${{ steps.image_name.outputs.DOCKER_IMAGE }} ${{ steps.image_name.outputs.DOCKER_IMAGE_VERSION }}

      - name: Logging into Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push into Docker Registry
        run: docker image push --all-tags ${{ steps.image_name.outputs.DOCKER_IMAGE }}
